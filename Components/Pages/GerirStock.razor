@page "/funcionario/consultar-stock"
@inject HttpClient Http

<h3>Consultar Stock</h3>

@if (materiais != null && materiais.Any())
{
    <ul class="list-group">
        @foreach (var material in materiais)
        {
            <li class="list-group-item">
                <p><strong>Material:</strong> @material.Nome</p>
                <p><strong>Quantidade:</strong> @material.Quantidade</p>
                <button class="btn btn-success" @onclick="() => ReporStock(material.Id)">Repor Stock</button>
            </li>
        }
    </ul>
}
else
{
    <p>Não há materiais disponíveis ou ainda estão a ser carregados.</p>
}

@code {
    private List<Material> materiais;

    protected override async Task OnInitializedAsync()
    {
        materiais = await Http.GetFromJsonAsync<List<Material>>("api/Funcionario/ConsultarStock");
    }

    private async Task ReporStock(int materialId)
    {
        var response = await Http.PostAsJsonAsync($"api/Funcionario/ReporStock?materialId={materialId}", null);
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Stock atualizado com sucesso.");
            materiais.FirstOrDefault(m => m.Id == materialId).Quantidade += 10; // Simulação de reposição
        }
        else
        {
            Console.WriteLine("Erro ao atualizar o stock.");
        }
    }
}
